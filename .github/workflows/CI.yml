name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "LICENSE"
  pull_request:
    paths-ignore:
      - "README.md"
      - "LICENSE"

jobs:
  test-save:
    runs-on: ubuntu-latest
    outputs:
      cache-name: ${{ steps.cache-artifacts.name }}
    steps:
    - uses: actions/checkout@v2
    - name: Generate random file
      shell: 'julia --color=yes {0}'
      run: 'write("random.txt", string(rand(10)))'
    - name: Save cache
      uses: ./
      with:
        cache-name: ${{ hashFiles('random.txt') }}
    - name: Set cache-name as output
      id: cache-artifacts
      run: |
        echo "::set-output name=$CACHE_NAME"
      env:
        CACHE_NAME: ${{ hashFiles('random.txt') }}
    - name: Check no artifacts dir
      shell: 'julia --color=yes {0}'
      run: |
        dir = joinpath(homedir(), ".julia", "artifacts")
        @assert !isdir(dir)
    - name: Install a small binary
      shell: 'julia --color=yes {0}'
      run: 'using Pkg; Pkg.add("pandoc_jll")'
  test-restore:
    needs: test-save
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Restore cache
      uses: ./
      with:
        cache-name: ${{ needs.test-save.cache-name }}
    - name: Check non-empty artifacts dir
      shell: 'julia --color=yes {0}'
      run: |
        dir = joinpath(homedir(), ".julia", "artifacts")
        @assert !isempty(readdir(dir))

