name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'action.yml'
      - 'handle_caches.jl'
      - '.github/**'
  pull_request:
    paths:
      - 'action.yml'
      - 'handle_caches.jl'
      - '.github/**'

# needed to allow julia-actions/cache to delete old caches that it has created
permissions:
  actions: write
  contents: read

jobs:
  generate-key:
    runs-on: ubuntu-latest
    outputs:
      cache-name: ${{ steps.name.outputs.cache-name }}
    steps:
    - name: Generate random cache-name
      id: name
      run: |
        cache_name=$(head -n 100 </dev/urandom | shasum -a 256 | cut -d ' ' -f 1)
        echo "cache-name=$cache_name" | tee -a "$GITHUB_OUTPUT"

  test-save:
    needs: generate-key
    strategy:
      matrix:
        dep:
          - name: pandoc_jll
            version: "3"
            invalid-chars: ","  # Use invalid characters in job matrix to ensure we escape them
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      JULIA_DEPOT_PATH: /tmp/julia-depot
      CACHE_NAME: ${{ needs.generate-key.outputs.cache-name }}-matrix
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - name: Save cache
      id: cache
      uses: ./
      with:
        cache-name: ${{ env.CACHE_NAME }}
        delete-old-caches: required
    - name: Check no artifacts dir
      shell: 'julia --color=yes {0}'
      run: |
        dir = joinpath(first(DEPOT_PATH), "artifacts")
        @assert !isdir(dir)
    - name: Install a small binary
      shell: 'julia --color=yes {0}'
      run: 'using Pkg; Pkg.add(PackageSpec(name="${{ matrix.dep.name }}", version="${{ matrix.dep.version }}"))'

  # Do tests with no matrix also given the matrix is auto-included in cache key
  test-save-nomatrix:
    needs: generate-key
    runs-on: ubuntu-latest
    env:
      CACHE_NAME: ${{ needs.generate-key.outputs.cache-name }}-nomatrix
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - name: Save cache
      id: cache
      uses: ./
      with:
        cache-name: ${{ env.CACHE_NAME }}
        delete-old-caches: required
    - name: Check no artifacts dir
      shell: 'julia --color=yes {0}'
      run: |
        dir = joinpath(first(DEPOT_PATH), "artifacts")
        @assert !isdir(dir)
    - name: Install a small binary
      shell: 'julia --color=yes {0}'
      run: 'using Pkg; Pkg.add("pandoc_jll")'

  test-restore:
    needs: [generate-key, test-save]
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    env:
      CACHE_NAME: ${{ needs.generate-key.outputs.cache-name }}-matrix
    steps:
    # Use a separate workflow for the restore cache job due to limitations with creating/deleting a cache entry in a single workflow
    - name: Restore Cache
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: CI Restore
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}  # Execute the workflow using the same branch name
        inputs: '{"cache-name": "${{ env.CACHE_NAME }}"}'

  test-restore-nomatrix:
    needs: [generate-key, test-save-nomatrix]
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    env:
      CACHE_NAME: ${{ needs.generate-key.outputs.cache-name }}-nomatrix
    steps:
    # Use a separate workflow for the restore cache job due to limitations with creating/deleting a cache entry in a single workflow
    - name: Restore Cache
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: CI Restore (no matrix)
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}  # Execute the workflow using the same branch name
        inputs: '{"cache-name": "${{ env.CACHE_NAME }}"}'