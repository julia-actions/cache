name: 'Cache Julia artifacts, packages and registry'
description: 'Cache Julia using actions/cache'
author: 'Sascha Mann, Rik Huijzer, and contributors'

branding:
  icon: 'archive'
  color: 'purple'

inputs:
  cache-name:
    description: 'Name used as part of the cache key. If your matrix has `julia-version` or `arch` under different names, interpolate their values into this name'
    default: 'julia-cache'
  cache-artifacts:
    description: 'Whether to cache ~/.julia/artifacts/'
    default: 'true'
  cache-packages:
    description: 'Whether to cache ~/.julia/packages/'
    default: 'true'
  cache-registries:
    description: 'Whether to cache ~/.julia/registries/. This is off by default to ensure CI gets latest versions'
    default: 'false'
  cache-compiled:
    description: 'Whether to cache ~/.julia/compiled/'
    default: 'true'
  cache-scratchspaces:
    description: 'Whether to cache ~/.julia/scratchspaces/'
    default: 'true'
  cache-logs:
    description: 'Whether to cache ~/.julia/logs/. This helps automatic Pkg.gc() keep the cache size down'
    default: 'true'
  delete-old-caches:
    description: 'Whether to delete old caches for the given key'
    default: 'true'

outputs:
  cache-hit:
    description: 'A boolean value to indicate an exact match was found for the primary key. Returns \"\" when the key is new. Forwarded from actions/cache'
    value: ${{ steps.hit.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - id: paths
      run: |
        [ "${{ inputs.cache-artifacts }}" = "true" ] && A_PATH="~/.julia/artifacts"
        echo "artifacts-path=$A_PATH" >> $GITHUB_OUTPUT
        [ "${{ inputs.cache-packages }}" = "true" ] && P_PATH="~/.julia/packages"
        echo "packages-path=$P_PATH" >> $GITHUB_OUTPUT
        [ "${{ inputs.cache-registries }}" = "true" ] && R_PATH="~/.julia/registries"
        echo "registries-path=$R_PATH" >> $GITHUB_OUTPUT
        [ "${{ inputs.cache-compiled }}" = "true" ] && PCC_PATH="~/.julia/compiled"
        echo "compiled-path=$PCC_PATH" >> $GITHUB_OUTPUT
        [ "${{ inputs.cache-scratchspaces }}" = "true" ] && S_PATH="~/.julia/scratchspaces"
        echo "scratchspaces-path=$S_PATH" >> $GITHUB_OUTPUT
        [ "${{ inputs.cache-logs }}" = "true" ] && L_PATH="~/.julia/logs"
        echo "logs-path=$L_PATH" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/cache@4d4ae6ae148a43d0fd1eda1800170683e9882738
      id: cache
      with:
        path: |
          ${{ steps.paths.outputs.artifacts-path }}
          ${{ steps.paths.outputs.packages-path }}
          ${{ steps.paths.outputs.registries-path }}
          ${{ steps.paths.outputs.scratchspaces-path }}
          ${{ steps.paths.outputs.compiled-path }}
          ${{ steps.paths.outputs.logs-path }}
        # the key should be unique to the run, otherwise actions/cache will refuse to save it
        key: ${{ inputs.cache-name }}-${{ matrix.julia-version }}-${{ runner.os }}-${{ matrix.arch }}-${{ github.run_id }}-${{ github.run_attempt }}
        # Note: if changed, make sure the restore key is updated in the delete step too
        restore-keys: |
          ${{ inputs.cache-name }}-${{ matrix.julia-version }}-${{ runner.os }}-${{ matrix.arch }}
        enableCrossOsArchive: false

    # github and actions/cache doesn't provide a way to update a cache at a given key, so we delete any
    # that match the restore key just before saving the new cache
    - uses: pyTooling/Actions/with-post-step@v0.4.6
      if: ${{ inputs.delete-old-caches == 'true' }}
      with:
        # seems like there has to be a `main` step in this action. Could list caches for info if we wanted
        # main:  julia ${{ github.action_path }}/handle_caches.jl "list"
        main: echo ""
        post: julia ${{ github.action_path }}/handle_caches.jl "rm" "${{ inputs.cache-name }}-${{ matrix.julia-version }}-${{ runner.os }}-${{ matrix.arch }}"
      env:
        GH_TOKEN: ${{ github.token }}

    - id: hit
      run: echo "cache-hit=$CACHE_HIT" >> $GITHUB_OUTPUT
      env:
        CACHE_HIT: ${{ steps.cache.outputs.cache-hit }}
      shell: bash
